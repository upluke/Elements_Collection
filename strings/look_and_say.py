# 6.7 The look-and-say problem
# https://www.geeksforgeeks.org/look-and-say-sequence/
# 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, â€¦
# The first term is "1"
# Second term is "11", generated by reading first term as "One 1"
# (There is one 1 in previous term)
# Third term is "21", generated by reading second term as "Two 1"
# Fourth term is "1211", generated by reading third term as "One 2 One 1"
# and so on

# Example:
# Input: n = 3
# Output: 21

# Input: n = 5
# Output: 111221

import itertools
# ele:


def look_and_say(n):
    def next_number(s):
        result, i = [], 0
        while i < len(s):
            count = 1
            while i + 1 < len(s) and s[i] == s[i + 1]:
                i += 1
                count += 1
            result.append(str(count) + s[i])
            i += 1
        return ''.join(result)

    s = '1'
    for _ in range(1, n):
        s = next_number(s)
    return s


# Pythonic solution uses the power of itertools.groupby().
def look_and_say_pythonic(n):
    s = '1'
    for _ in range(n - 1):
        s = ''.join(
            str(len(list(group))) + key for key, group in itertools.groupby(s))
    return s


# init:
def countandSay(n):
    loop_up = ['1']

    def count_machine(item):
        res = ''
        if len(item) == 1:
            res = '1'+item
            return res

        str_idx = 0
        end_idx = 0

        while end_idx < len(item):
            if item[str_idx] != item[end_idx]:
                count_value = item[str_idx: end_idx].count(item[str_idx])
                res += str(count_value) + item[str_idx]
                str_idx = end_idx
            if end_idx == len(item)-1:
                count_value = item[str_idx:].count(item[end_idx])
                res += str(count_value) + item[end_idx]
            end_idx += 1
        if str_idx == 0:
            res = str(item.count(item[str_idx]))+item[str_idx]
        return res
    for i in range(1, n):
        loop_up.append(count_machine(loop_up[i-1]))

    return loop_up[-1]


print(countandSay(3))
